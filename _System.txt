* Class(1H)
- 공식
	해석, 통계, 기하, ..
		블랙라벨 2015 고등수학(×2) : 수학1&2, 미적분1&확률과통계, 미적분2&기하와벡터

* Application
- IT
	Certification
		Engineer Information Processing
		Engineer Information Security
		SQLP
		DAP
		ADP
		Oracle...
	Code
		Algorithms
		Design Patterns
		Responsive Web
			Springless
			SpringMVC
			SpringBoot
- ?

* Reference
- Book PDF
	libgen : https://libgen.is
	z-library : https://z-lib.org

* Issue
- GitHub Year 2021 Daily Commit : 2021년 6월 8일(화)
	블랙라벨 2015 고등수학 : 수학1&2 ~비법6
- 카포설 수학교재 조사
	해석학
	대수학
	기하학
	확률통계
	+ 올림피아드



--------------------------------------------------< ? >--------------------------------------------------

// ...



--------------------------------------------------< SQLP >--------------------------------------------------

* 비절차적 vs 절차적
- As-Is : 비절차적 데이터 조작어(DML)은 사용자가 무슨(What) 데이터를 원하는 지를 명세함
- To-Be : 절차적 데이터 조작어(PL/SQL(Oracle), T-SQL(SQL Server))은 사용자가 어떻게(How) 데이터에 접근해야 하는지를 명세함

* Syntax(Oracle)
	DML(Date Manipulation Language) : Select, Insert, Update, Delete
	DDL(Data Definition Language) : Create, Alter, Drop, Rename, Truncate
		Create
		Alter
			ALTER TABLE [테이블명] ADD [추가할 컬럼명] [데이터 유형];
			ALTER TABLE [테이블명] DROP COLUMN [삭제할 컬럼명];
			ALTER TABLE [테이블명] MODIFY([컬럼명1] [데이터 유형1], [컬럼명2] [데이터 유형2]);
			ALTER TABLE [테이블명] RENAME COLUMN [변경 전 컬럼명] TO [변경 후 컬럼명];
			ALTER TABLE [테이블명] ADD CONSTRAINT [제약조건명] FOREIGN KEY([컬럼명]) REFERENCES [참조할 테이블명(컬럼명)];
			ALTER TABLE [테이블명] DROP CONSTRAINT [제약조건명];
		Drop
		Rename
			RENAME [변경 전 테이블명] TO [변경 후 테이블명];
	DCL(Data Control Language) : Grant, Revoke
	TCL(Transaction Control Language) : Commit, Rollback

* Select문의 실행순서
- FROM > WHERE > GROUP BY > HAVING > SELECT > ORDER BY

* Delete vs Truncate vs Drop
- Delete
	테이블 정의 '존재'(데이터만 삭제)
	저장공간 '유지'(사용했던 Storage는 Release 안 됨)
	작업속도 '느림'
	사용자 Commit(Commit 이전에는 Rollback이 가능)
- Truncate
	테이블 정의 '존재'(테이블을 생성 초기상태로 만듦)
	저장공간 '반납'(사용했던 Storage중 생성초기 Storage만 남기고 Release = 테이블의 모든 Row를 제거)
	작업속도 '빠름'
	Auto Commit(Rollback 불가능)
- Drop
	테이블 정의 '삭제'
	저장공간 '반납'(사용했던 Storage를 모두 Release)
	작업속도 '빠름'
	Auto Commit(Rollback 불가능)

* Subquery
	반환값별
		Single Row Subquery
		Multiple Row Subquery
		Multiple Column Subquery
	위치별
		Nested Subquery : WHERE 부분에 나타남
			Correlated Subquery
		Inline View : FROM 부분에 나타남
		Scalar Subquery : SELECT 부분에 나타남

* 연산자
- 순수 관계 연산자
	SELECT
	PROJECT
	JOIN
	DIVIDE
- 집합 연산자
	UNION
	UNION ALL
	INTERSECT
	EXCEPT

* Hierarchical Queries
- Syntax
	START WITH
	CONNECT BY PRIOR
		CONNECT BY PRIOR 자식컬럼 = 부모컬럼 : 부모에서 자식으로 트리 구성(Top Down)
		CONNECT BY PRIOR 부모컬럼 = 자식컬럼 : 자식에서 부모로 트리 구성(Bottom Up)
	LEVEL PseudoColumn
	ORDER SIBLINGS BY
- Example(Top Down)
	SELECT
		LEVEL, LPAD(' ', 4*(LEVEL-1)) || ename ename,
		PRIOR ename mgrname -- 상위 행의 컬럼임을 나타내며 생략 가능
		empno, mgr, job
	FROM
		emp
	START WITH
		job = 'PRESIDENT' -- 최상위 노드 값이 와야 함
	CONNECT BY
		PRIOR empno = mgr; -- '자식노드 = 부모노드'의 형식
- Example(Bottom Up)
	SELECT
		LEVEL, LPAD(' ', 4*(LEVEL-1)) || ename ename, empno, mgr, job
	FROM
		emp
	START WITH
		ename = 'SMITH' -- 최하위 노드 값이 와야 함
	CONNECT BY
		PRIOR mgr = ename; -- '부모노드 = 자식노드'의 형식

* Rollup vs Cube vs Grouping Sets
- GROUP BY
	SELECT e.DEPTNO, e.JOB, SUM(SAL)
	FROM EMP e
	GROUP BY e.DEPTNO, e.JOB
	ORDER BY DEPTNO;
- ROLLUP
	SELECT e.DEPTNO, e.JOB, SUM(SAL)
	FROM EMP e
	GROUP BY ROLLUP(e.DEPTNO, e.JOB);
- CUBE
	SELECT e.DEPTNO, e.JOB, SUM(SAL)
	FROM EMP e
	GROUP BY CUBE(e.DEPTNO, e.JOB);
- GROUPING SETS
	SELECT e.DEPTNO, e.JOB, SUM(SAL)
	FROM EMP e
	GROUP BY GROUPING SETS(e.DEPTNO, e.JOB);
- GROUPING SETS like CUBE
	SELECT e.DEPTNO, e.JOB, SUM(SAL)
	FROM EMP e
	GROUP BY GROUPING SETS((e.DEPTNO, e.JOB), e.DEPTNO, e.JOB, ());

* Partition By
- Example
	SELECT
		*
	FROM
	(
		SELECT
			EMPNO, ENAME, DEPTNO, JOB, SAL, RANK() OVER(PARTITION BY DEPTNO ORDER BY SAL DESC) RANK
		FROM
			EMP
	)
	WHERE
		RANK < 4;

* Rank vs Dense_Rank vs Row_Number
- Example
	Rank : 1 2 2 4
	Dense_Rank : 1 2 2 3
	Row_Number : 1 2 3 4

* Rows vs Range
- Rows : 물리적 단위로 행 집합을 지정(order by 의 수치가 동일해도 별도의 행으로 연산함)
	SELECT
		e.ENAME, e.JOB, e.SAL,
		SUM(SAL) OVER(PARTITION BY e.JOB ORDER BY e.SAL
			ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS Total_by_job
	FROM
		EMP e;
- Range : 논리적 단위로 행 집합을 지정(order by 의 수치가 동일한 컬럼 값을 가지는 행들을 묶어서 연산함)
	SELECT
		e.ENAME, e.JOB, e.SAL,
		SUM(SAL) OVER(PARTITION BY e.JOB ORDER BY e.SAL
			RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS Total_by_job
	FROM
		EMP e;



--------------------------------------------------< Design Patterns >--------------------------------------------------

* [Creational] Abstract Factory
- Provide an interface for creating families of related or dependent objects
  without specifying their concrete classes.
  // Code...

* [Creational] Builder
- Separate the construction of a complex object from its representation
  so that the same construction process can create different representations.
  // Code...

* [Creational] Factory Method
- Define an interface for creating an object, but let subclasses decide which class to instantiate.
  Factory Method lets a class defer instantiation to subclasses.
  // Code...

* [Creational] Prototype
- Specify the kinds of objects to create using a prototypical instance,
  and create new objects by copying this prototype.
  // Code...

* [Creational] Singleton
- Ensure a class only has one instance, and provide a global point of access to it.
  // Code...

* [Structural] Adapter
- Convert the interface of a class into another interface clients expect.
  Adapter lets classes work together that couldn't otherwise because of incompatible interfaces.
  // Code...

* [Structural] Bridge
- Decouple an abstraction from its implementation so that the two can vary independently.
  // Code...

* [Structural] Composite
- Compose objects into tree structures to represent part-whole hierarchies.
  Composite lets clients treat individual objects and compositions of objects uniformly.
  // Code...

* [Structural] Decorator
- Attach additional responsibilities to an object dynamically.
  Decorators provide a flexible alternative to subclassing for extending functionality.
  // Code...

* [Structural] Facade
- Provide a unified interface to a set of interfaces in a subsystem.
  Facade defines a higher-level interface that makes the subsystem easier to use.
  // Code...

* [Structural] Flyweight
- Use sharing to support large numbers of fine-grained objects efficiently.
  // Code...

* [Structural] Proxy
- Provide a surrogate or placeholder for another object to control access to it.
  // Code...

* [Behavioral] Chain of Responsibility
- Avoid coupling the sender of a request to its receiver
  by giving more than one object a chance to handle the request.
  Chain the receiving objects and pass the request along the chain until an object handles it.
  // Code...

* [Behavioral] Command
- Encapsulate a request as an object,
  thereby letting you parameterize clients with different requests, queue or log requests,
  and support undoable operations.
  // Code...

* [Behavioral] Interpreter
- Given a language, define a representation for its grammar along with an interpreter
  that uses the representation to interpret sentences in the language.
  // Code...

* [Behavioral] Iterator
- Provide a way to access the elements of an aggregate object sequentially
  without exposing its underlying representation.
  // Code...

* [Behavioral] Mediator
- Define an object that encapsulates how a set of objects interact.
  Mediator promotes loose coupling by keeping objects from referring to each other explicitly,
  and it lets you vary their interaction independently.
  // Code...

* [Behavioral] Memento
- Without violating encapsulation, capture and externalize an object's internal state
  so that the object can be restored to this state later.
  // Code...

* [Behavioral] Observer
- Define a one-to-many dependency between objects
  so that when one object changes state, all its dependents are notified and updated automatically.
  // Code...

* [Behavioral] State
- Allow an object to alter its behavior when its internal state changes.
  The object will appear to change its class.
  // Code...

* [Behavioral] Strategy
- Define a family of algorithms, encapsulate each one, and make them interchangeable.
  Strategy lets the algorithm vary independently from clients that use it.
  // Code...

* [Behavioral] Template Method
- Define the skeleton of an algorithm in an operation, deferring some steps to subclasses.
  Template Method lets subclasses redefine certain steps of an algorithm
  without changing the algorithm's structure.
  // Code...

* [Behavioral] Visitor
- Represent an operation to be performed on the elements of an object structure.
  Visitor lets you define a new operation without changing the classes of the elements on which it operates.
  // Code...


